# Build numbering format
name: $(BuildID)

trigger:
  - master
  - feat/*
  - release

pool:
  vmImage: 'ubuntu-latest'


# Schedule
# ---------

schedules:
  - cron: "0 0 * * Mon"
    displayName: Weekly midnight build
    always: true
    branches:
      include:
        - master
        - releases/*


# Shared Templates
# ----------------

resources:
  repositories:
    - repository: templates
      type: github
      name: julie-ng/azure-pipelines-templates
      endpoint: julie-ng # service connection
      ref: refs/tags/v1.2.0


# Variables
# ---------

variables:
  - group: newton-common-vars

  - name: app-name
    value: newton-demo-data-editor

  - name: image-tag
    value: 'dev'

  - name: image-name
    value: julieio/newtonjs-demo-editor

  - name: registry-connection
    value: docker-hub-julieio-connection

  - name: is-dev
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/master') }}

  - name: is-release
    value: ${{ and(eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['Build.Reason'], 'Schedule')) }}


# Stages
# ------

stages:

  # Stage 1 - Tests
  - stage: Tests
    displayName: "Tests (CI)"
    jobs:
      - job: audit
        displayName: Audit Dependencies
        steps:
          - script: npm audit --audit-level=moderate
            displayName: Audit (all)
            continueOnError: true

          - script: npm audit --production --audit-level=moderate
            displayName: Audit (Prod only)

      - job: lint
        displayName: Lint Code
        steps:
          - script: npm ci && npm run lint
            displayName: Lint Code

  # Stage 2 - Docker: Build and Push
  - stage: Build
    displayName: Build
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - job: build_image
        displayName: Build Docker Image
        steps:
          - template: steps/set-custom-variable.yml@templates
            parameters:
              condition: ${{ variables['is-release'] }}
              variableName: image-tag
              command: 'npm run --silent my-version'

          - template: steps/docker-build-push.yml@templates
            parameters:
              registryConnectionName: $(registry-connection)
              imageName: $(image-name)
              tagsAsMultilineString: |
                $(image-tag)
              condition: ${{ or(variables['is-dev'], variables['is-release']) }}

  # Stage 3 - Deploy
  - stage: Deploy
    displayName: Deploy Container
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
    - job: deploy_master
      displayName: 'Deploy (master)'
      condition: ${{ variables['is-dev'] }}
      steps:
        - template: steps/deploy-app-service.yml@templates
          parameters:
            ARMConnectionName: $(lib-arm-connection)
            dockerImage: $(image-name):$(image-tag)
            appName: $(app-name)-dev # with `-dev` suffix

    - job: deploy_release
      displayName: 'Deploy (release)'
      condition: ${{ variables['is-release'] }}
      steps:
        - template: steps/set-custom-variable.yml@templates
          parameters:
            variableName: image-tag
            command: 'npm run --silent my-version'

        - template: steps/deploy-app-service.yml@templates
          parameters:
            ARMConnectionName: $(lib-arm-connection)
            dockerImage: $(image-name):$(image-tag)
            appName: $(app-name)
